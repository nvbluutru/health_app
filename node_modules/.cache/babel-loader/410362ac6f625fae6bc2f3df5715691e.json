{"ast":null,"code":"var _jsxFileName = \"/Users/nvbofficial/Documents/Programmer/FPT/FSOFT/Document/ReactJS/FEFW Assignment/AssignReactJS/4.health-declaration-app-assignment-trainee/source_code/BaoNV12_HealthApp/src/Components/CustomFields/InputField.tsx\";\nimport { Form } from \"react-bootstrap\";\nimport { getValueForPath } from \"../../services/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function InputField(_ref) {\n  let {\n    field,\n    form,\n    ...props\n  } = _ref;\n  const {\n    label\n  } = props;\n  const {\n    name\n  } = field;\n  const {\n    errors,\n    touched\n  } = form;\n  const showError = getValueForPath(touched, name) && getValueForPath(errors, name);\n  return /*#__PURE__*/_jsxDEV(Form.Group, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n      htmlFor: name,\n      children: [label, /*#__PURE__*/_jsxDEV(Form.Text, {\n        className: \"text-danger\",\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n      className: \"form-control\",\n      id: name,\n      ...field,\n      ...props,\n      isValid: getValueForPath(touched, name),\n      isInvalid: showError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n      type: \"invalid\",\n      children: getValueForPath(errors, name)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n_c = InputField;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"sources":["/Users/nvbofficial/Documents/Programmer/FPT/FSOFT/Document/ReactJS/FEFW Assignment/AssignReactJS/4.health-declaration-app-assignment-trainee/source_code/BaoNV12_HealthApp/src/Components/CustomFields/InputField.tsx"],"names":["Form","getValueForPath","InputField","field","form","props","label","name","errors","touched","showError"],"mappings":";AAAA,SAASA,IAAT,QAAqB,iBAArB;AACA,SAASC,eAAT,QAAgC,sBAAhC;;AAEA,eAAe,SAASC,UAAT,OAAoD;AAAA,MAAhC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAe,OAAGC;AAAlB,GAAgC;AACjE,QAAM;AAAEC,IAAAA;AAAF,MAAYD,KAAlB;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAWJ,KAAjB;AACA,QAAM;AAAEK,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAsBL,IAA5B;AACA,QAAMM,SAAS,GACbT,eAAe,CAACQ,OAAD,EAAUF,IAAV,CAAf,IAAkCN,eAAe,CAACO,MAAD,EAASD,IAAT,CADnD;AAGA,sBACE,QAAC,IAAD,CAAM,KAAN;AAAA,4BACE,QAAC,IAAD,CAAM,KAAN;AAAY,MAAA,OAAO,EAAEA,IAArB;AAAA,iBACGD,KADH,eAEE,QAAC,IAAD,CAAM,IAAN;AAAW,QAAA,SAAS,EAAC,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,IAAD,CAAM,OAAN;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,EAAE,EAAEC,IAFN;AAAA,SAGMJ,KAHN;AAAA,SAIME,KAJN;AAKE,MAAA,OAAO,EAAEJ,eAAe,CAACQ,OAAD,EAAUF,IAAV,CAL1B;AAME,MAAA,SAAS,EAAEG;AANb;AAAA;AAAA;AAAA;AAAA,YALF,eAaE,QAAC,IAAD,CAAM,OAAN,CAAc,QAAd;AAAuB,MAAA,IAAI,EAAC,SAA5B;AAAA,gBACGT,eAAe,CAACO,MAAD,EAASD,IAAT;AADlB;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;KA1BuBL,U","sourcesContent":["import { Form } from \"react-bootstrap\";\nimport { getValueForPath } from \"../../services/index\";\n\nexport default function InputField({ field, form, ...props }: any) {\n  const { label } = props;\n  const { name } = field;\n  const { errors, touched } = form;\n  const showError =\n    getValueForPath(touched, name) && getValueForPath(errors, name);\n\n  return (\n    <Form.Group>\n      <Form.Label htmlFor={name}>\n        {label}\n        <Form.Text className=\"text-danger\">*</Form.Text>\n      </Form.Label>\n      <Form.Control\n        className=\"form-control\"\n        id={name}\n        {...field}\n        {...props}\n        isValid={getValueForPath(touched, name)}\n        isInvalid={showError}\n      />\n      <Form.Control.Feedback type=\"invalid\">\n        {getValueForPath(errors, name)}\n      </Form.Control.Feedback>\n    </Form.Group>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}