{"ast":null,"code":"import provinceAndDistince from \"../data/vietnam-province-district.json\";\nimport country from \"../data/countries.json\";\nexport const getProvince = () => {\n  const values = Object.values(provinceAndDistince);\n  return values.map(item => ({\n    label: item.name,\n    value: item.name,\n    cities: Object.values(item.cities)\n  }));\n};\nexport const getDistrict = province => {\n  const findProvince = getProvince().find(item => item.label === province);\n  return findProvince ? findProvince.cities : [];\n};\nexport const randomId = length => {\n  var result = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  return result;\n};\nexport const getValueForPath = (obj, path) => {\n  try {\n    const arrPath = path.split(\".\");\n    let values = { ...obj\n    };\n\n    for (let item of arrPath) {\n      values = values[`${item}`];\n    }\n\n    return values;\n  } catch (e) {\n    return undefined;\n  }\n};\nexport const getTotalPage = (totalRow, TotalData) => {\n  return Math.ceil(TotalData / totalRow);\n};\nexport const optionObject = [{\n  label: \"Choose...\",\n  value: \"\"\n}, {\n  label: \"Expert\",\n  value: \"Expert\"\n}, {\n  label: \"Vietnamese\",\n  value: \"Vietnamese\"\n}, {\n  label: \"International Student\",\n  value: \"International Student\"\n}, {\n  label: \"Order\",\n  value: \"Order\"\n}];\nexport const optionGender = [{\n  label: \"Choose...\",\n  value: \"\"\n}, {\n  label: \"Male\",\n  value: \"Male\"\n}, {\n  label: \"Female\",\n  value: \"Female\"\n}, {\n  label: \"Order\",\n  value: \"Order\"\n}];\nexport const optionCountry = [{\n  label: \"Choose...\",\n  value: \"\"\n}, ...country.map(item => ({\n  label: item.name,\n  value: item.name\n}))];\nexport const optionProvince = [{\n  label: \"Choose...\",\n  value: \"\"\n}, ...getProvince().map(item => ({\n  label: item.label,\n  value: item.value\n}))];\nexport const optionDistrict = province => {\n  const resultDistrict = getDistrict(province).map(item => ({\n    label: item,\n    value: item\n  }));\n  resultDistrict.unshift({\n    label: \"Choose...\",\n    value: \"\"\n  });\n  return resultDistrict;\n};","map":{"version":3,"sources":["/Users/nvbofficial/Documents/Programmer/FPT/FSOFT/Document/ReactJS/FEFW Assignment/AssignReactJS/4.health-declaration-app-assignment-trainee/source_code/BaoNV12_HealthApp/src/services/index.ts"],"names":["provinceAndDistince","country","getProvince","values","Object","map","item","label","name","value","cities","getDistrict","province","findProvince","find","randomId","length","result","characters","charactersLength","i","charAt","Math","floor","random","getValueForPath","obj","path","arrPath","split","e","undefined","getTotalPage","totalRow","TotalData","ceil","optionObject","optionGender","optionCountry","optionProvince","optionDistrict","resultDistrict","unshift"],"mappings":"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","sourcesContent":["import provinceAndDistince from \"../data/vietnam-province-district.json\";\nimport { Province, Option } from \"./interface\";\nimport country from \"../data/countries.json\";\nexport const getProvince = (): Array<Province> => {\n  const values = Object.values(provinceAndDistince);\n  return values.map((item) => ({\n    label: item.name,\n    value: item.name,\n    cities: Object.values(item.cities),\n  }));\n};\nexport const getDistrict = (province: string): Array<string> => {\n  const findProvince = getProvince().find((item) => item.label === province);\n  return findProvince ? findProvince.cities : [];\n};\nexport const randomId = (length: number) => {\n  var result = \"\";\n  var characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\nexport const getValueForPath = (obj: object, path: string) => {\n  try {\n    const arrPath = path.split(\".\");\n    let values: any = { ...obj };\n    for (let item of arrPath) {\n      values = values[`${item}`];\n    }\n    return values;\n  } catch (e) {\n    return undefined;\n  }\n};\nexport const getTotalPage = (totalRow: number, TotalData: number) => {\n  return Math.ceil(TotalData / totalRow);\n};\nexport const optionObject: Array<Option> = [\n  {\n    label: \"Choose...\",\n    value: \"\",\n  },\n  {\n    label: \"Expert\",\n    value: \"Expert\",\n  },\n  {\n    label: \"Vietnamese\",\n    value: \"Vietnamese\",\n  },\n  {\n    label: \"International Student\",\n    value: \"International Student\",\n  },\n  {\n    label: \"Order\",\n    value: \"Order\",\n  },\n];\n\nexport const optionGender: Array<Option> = [\n  {\n    label: \"Choose...\",\n    value: \"\",\n  },\n  {\n    label: \"Male\",\n    value: \"Male\",\n  },\n  {\n    label: \"Female\",\n    value: \"Female\",\n  },\n  {\n    label: \"Order\",\n    value: \"Order\",\n  },\n];\nexport const optionCountry: Array<Option> = [\n  {\n    label: \"Choose...\",\n    value: \"\",\n  },\n  ...country.map((item) => ({\n    label: item.name,\n    value: item.name,\n  })),\n];\nexport const optionProvince: Array<Option> = [\n  {\n    label: \"Choose...\",\n    value: \"\",\n  },\n  ...getProvince().map((item) => ({\n    label: item.label,\n    value: item.value,\n  })),\n];\nexport const optionDistrict = (province: string): Array<Option> => {\n  const resultDistrict = getDistrict(province).map((item) => ({\n    label: item,\n    value: item,\n  }));\n  resultDistrict.unshift({\n    label: \"Choose...\",\n    value: \"\",\n  });\n\n  return resultDistrict;\n};\n"]},"metadata":{},"sourceType":"module"}