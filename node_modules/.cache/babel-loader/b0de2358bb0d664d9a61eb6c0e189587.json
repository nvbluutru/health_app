{"ast":null,"code":"var _jsxFileName = \"/Users/nvbofficial/Documents/Programmer/FPT/FSOFT/Document/ReactJS/FEFW Assignment/AssignReactJS/4.health-declaration-app-assignment-trainee/source_code/BaoNV12_HealthApp/src/Components/CustomFields/SelectField.tsx\";\nimport { Form } from \"react-bootstrap\";\nimport { getValueForPath } from \"../../services/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SelectField(_ref) {\n  let {\n    field,\n    form,\n    options,\n    ...props\n  } = _ref;\n  const {\n    label\n  } = props;\n  const {\n    name\n  } = field;\n  const {\n    errors,\n    touched\n  } = form;\n  const showError = getValueForPath(touched, name) && getValueForPath(errors, name);\n  return /*#__PURE__*/_jsxDEV(Form.Group, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n      children: [label, /*#__PURE__*/_jsxDEV(Form.Text, {\n        className: \"text-danger\",\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Select, { ...field,\n      ...props,\n      isValid: getValueForPath(touched, name),\n      isInvalid: showError,\n      children: options === null || options === void 0 ? void 0 : options.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: item.value,\n        children: item.label\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n      type: \"invalid\",\n      children: showError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n_c = SelectField;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectField\");","map":{"version":3,"sources":["/Users/nvbofficial/Documents/Programmer/FPT/FSOFT/Document/ReactJS/FEFW Assignment/AssignReactJS/4.health-declaration-app-assignment-trainee/source_code/BaoNV12_HealthApp/src/Components/CustomFields/SelectField.tsx"],"names":["Form","getValueForPath","SelectField","field","form","options","props","label","name","errors","touched","showError","map","item","index","value"],"mappings":";AAAA,SAASA,IAAT,QAAqB,iBAArB;AAEA,SAASC,eAAT,QAAgC,sBAAhC;;AAEA,eAAe,SAASC,WAAT,OAA8D;AAAA,MAAzC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA,OAAf;AAAwB,OAAGC;AAA3B,GAAyC;AAC3E,QAAM;AAAEC,IAAAA;AAAF,MAAYD,KAAlB;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAWL,KAAjB;AACA,QAAM;AAAEM,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAsBN,IAA5B;AACA,QAAMO,SAAS,GACbV,eAAe,CAACS,OAAD,EAAUF,IAAV,CAAf,IAAkCP,eAAe,CAACQ,MAAD,EAASD,IAAT,CADnD;AAEA,sBACE,QAAC,IAAD,CAAM,KAAN;AAAA,4BACE,QAAC,IAAD,CAAM,KAAN;AAAA,iBACGD,KADH,eAEE,QAAC,IAAD,CAAM,IAAN;AAAW,QAAA,SAAS,EAAC,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,IAAD,CAAM,MAAN,OACMJ,KADN;AAAA,SAEMG,KAFN;AAGE,MAAA,OAAO,EAAEL,eAAe,CAACS,OAAD,EAAUF,IAAV,CAH1B;AAIE,MAAA,SAAS,EAAEG,SAJb;AAAA,gBAMGN,OANH,aAMGA,OANH,uBAMGA,OAAO,CAAEO,GAAT,CAAa,CAACC,IAAD,EAAeC,KAAf,kBACZ;AAAoB,QAAA,KAAK,EAAED,IAAI,CAACE,KAAhC;AAAA,kBACGF,IAAI,CAACN;AADR,SAAaO,KAAb;AAAA;AAAA;AAAA;AAAA,cADD;AANH;AAAA;AAAA;AAAA;AAAA,YALF,eAiBE,QAAC,IAAD,CAAM,OAAN,CAAc,QAAd;AAAuB,MAAA,IAAI,EAAC,SAA5B;AAAA,gBAAuCH;AAAvC;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;KA3BuBT,W","sourcesContent":["import { Form } from \"react-bootstrap\";\nimport { Option } from \"../../services/interface\";\nimport { getValueForPath } from \"../../services/index\";\n\nexport default function SelectField({ field, form, options, ...props }: any) {\n  const { label } = props;\n  const { name } = field;\n  const { errors, touched } = form;\n  const showError =\n    getValueForPath(touched, name) && getValueForPath(errors, name);\n  return (\n    <Form.Group>\n      <Form.Label>\n        {label}\n        <Form.Text className=\"text-danger\">*</Form.Text>\n      </Form.Label>\n      <Form.Select\n        {...field}\n        {...props}\n        isValid={getValueForPath(touched, name)}\n        isInvalid={showError}\n      >\n        {options?.map((item: Option, index: number) => (\n          <option key={index} value={item.value}>\n            {item.label}\n          </option>\n        ))}\n      </Form.Select>\n      <Form.Control.Feedback type=\"invalid\">{showError}</Form.Control.Feedback>\n    </Form.Group>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}